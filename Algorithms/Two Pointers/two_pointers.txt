Two Pointers: Is a technique that uses two pointers to solve problems by scanning from both ends of a data strucutre 
toward the center 

How it Works:

1. Initialization: Start by placing two pointers at different positions in the data structure
One pointer starts at the beginning (left), and the other at the end(right). In
some problems, both pointers might start from the beginning or in the middle and move outward

2. Movement: The pointers move towards each other or in a specific direction based on the 
conditions specified in the problem. The movement could involve:
    Moving one pointer conditionally based on some criteria 
    Moving both pointers simultaneously 
    Adjusting one pointer to maintain a particular condition(like maintaining a window of certain properties)

3. Condition Checking: As the pointers move the algorithm checks certain conditions.
When these conditions are met, a solution is derived.

Common Problems:

1. Finding a pair in a sorted array that sums to a target
2. Reversing a string or array
3. Removing duplicates from a sorted array
4. Checking for a palindrome
5. Sliding Window Problems
    The two pointers represent the windows start and end, and they slide across the array
    to maintain a certain condition(like a sum or a product)

General Format of Two Pointers Technique

while(left < right) 
    sum = test + test

    if(sum == target)
        left++
        right--;

    else if(sum < target)
        left++;
    else 
        right--;

We need to check if the sum is less than the target, because we need to increment
the left pointer to find a value that is greater to possibly equal the target

If the sum is greater than the target, we need to find a value that is less than the target to try and equal the target